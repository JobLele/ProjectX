import React from 'react';
import ReactDOM from 'react-dom';
import { StateDropdown, RegionDropdown } from '../../lib/rcrs';


class ExamplesPage extends React.Component {
  constructor (props) {
    super(props);

    this.getStateValue = this.getStateValue.bind(this);
    this.getRegionValue = this.getRegionValue.bind(this);

    // we really only need to stash the selected region + State in state, but I was feeling wacky
    this.state = {
      examples: [
        {
          label: 'Simple, no-frills example.',
          jsx: () => {
            return (
              <div>
                <StateDropdown
                  value={this.getStateValue(0)}
                  onChange={(val) => this.selectState(0, val)} />
                <RegionDropdown
                  State={this.getStateValue(0)}
                  value={this.getRegionValue(0)}
                  onChange={(val) => this.selectRegion(0, val)} />
              </div>
            );
          },
          codeVisible: false,
          code: '&lt;StateDropdown\n  value={State}\n  onChange={selectState} />\n&lt;RegionDropdown\n  State={State}\n  value={region}\n  onChange={selectRegion} />',
          State: '',
          region: ''
        },

        {
          label: 'Region field disabled until a State is selected.',
          jsx: () => {
            return (
              <div>
                <StateDropdown
                  value={this.getStateValue(1)}
                  onChange={(val) => this.selectState(1, val)} />
                <RegionDropdown
                  disableWhenEmpty={true}
                  State={this.getStateValue(1)}
                  value={this.getRegionValue(1)}
                  onChange={(val) => this.selectRegion(1, val)} />
              </div>
            );
          },
          codeVisible: false,
          code: '&lt;StateDropdown\n  value={State}\n  onChange={selectState} />\n&lt;RegionDropdown\n  disableWhenEmpty={true}\n  State={State}\n  value={region}\n  onChange={selectRegion} />',
          State: '',
          region: ''
        },

        {
          label: 'No State or region dropdown default option.',
          jsx: () => {
            return (
              <div>
                <StateDropdown
                  showDefaultOption={false}
                  value={this.getStateValue(2)}
                  onChange={(val) => this.selectState(2, val)} />
                <RegionDropdown
                  showDefaultOption={false}
                  State={this.getStateValue(2)}
                  value={this.getRegionValue(2)}
                  onChange={(val) => this.selectRegion(2, val)} />
              </div>
            );
          },
          codeVisible: false,
          code: '&lt;StateDropdown\n  showDefaultOption={false}\n  value={State}\n  onChange={selectState} />\n&lt;RegionDropdown\n  showDefaultOption={false}\n  State={State}\n  value={region}\n  onChange={selectRegion} />',
          State: '',
          region: ''
        },

        {
          label: 'Custom default option texts for both the State and region dropdowns.',
          jsx: () => {
            return (
              <div>
                <StateDropdown
                  defaultOptionLabel="Select a State, man."
                  value={this.getStateValue(3)}
                  onChange={(val) => this.selectState(3, val)} />
                <RegionDropdown
                  blankOptionLabel="No State selected, man."
                  defaultOptionLabel="Now select a region, pal."
                  State={this.getStateValue(3)}
                  value={this.getRegionValue(3)}
                  onChange={(val) => this.selectRegion(3, val)} />
              </div>
            );
          },
          codeVisible: false,
          code: '&lt;StateDropdown\n  defaultOptionLabel="Select a State, man."\n  value={State}\n  onChange={selectState} />\n&lt;RegionDropdown\n  blankOptionLabel="No State selected, man."\n  defaultOptionLabel="Now select a region, pal."\n  State={State}\n  value={region}\n  onChange={selectRegion} />',
          State: '',
          region: ''
        },

        {
          label: 'Custom name, class and ID attributes for both dropdowns.',
          jsx: () => {
            return (
              <div>
                <StateDropdown
                  value={this.getStateValue(4)}
                  id="my-State-field-id"
                  name="my-State-field"
                  classes="my-custom-class second-class"
                  onChange={(val) => this.selectState(4, val)} />
                <RegionDropdown
                  State={this.getStateValue(4)}
                  value={this.getRegionValue(4)}
                  name="my-region-field-name"
                  id="my-region-field-id"
                  classes="another-custom-class"
                  onChange={(val) => this.selectRegion(4, val)} />
              </div>
            );
          },
          codeVisible: false,
          code: '&lt;StateDropdown\n  value={State}\n  id="my-State-field-id"\n  name="my-State-field"\n  classes="my-custom-class second-class"\n  onChange={selectState} />\n&lt;RegionDropdown\n  State={State}\n  value={region}\n  name="my-region-field-name"\n  id="my-region-field-id"\n  classes="another-custom-class"\n  onChange={selectRegion} />',
          State: '',
          region: ''
        },

        {
          label: 'Abbreviated State and region names.',
          jsx: () => {
            return (
              <div>
                <StateDropdown
                  value={this.getStateValue(5)}
                  labelType="short"
                  valueType="short"
                  onChange={(val) => this.selectState(5, val)} />
                <RegionDropdown
                  State={this.getStateValue(5)}
                  value={this.getRegionValue(5)}
                  StateValueType="short"
                  labelType="short"
                  valueType="short"
                  onChange={(val) => this.selectRegion(5, val)} />
              </div>
            );
          },
          codeVisible: false,
          code: '&lt;StateDropdown\n  value={State}\n  labelType="short"\n  valueType="short"\n  onChange={selectState} />\n&lt;RegionDropdown\n  State={State}\n  value={region}\n  StateValueType="short"\n  labelType="short"\n  valueType="short"\n  onChange={selectRegion} />',
          State: '',
          region: ''
        },

        {
          label: 'Specify which countries should appear. This just shows the UK, United States and Canada. See the StateShortCode property in the source data for the State shortcodes you need to pass here.',
          jsx: () => {
            return (
              <div>
                <StateDropdown
                  value={this.getStateValue(6)}
                  onChange={(val) => this.selectState(6, val)}
                  whitelist={['GB','US','CA']} />
                <RegionDropdown
                  State={this.getStateValue(6)}
                  value={this.getRegionValue(6)}
                  onChange={(val) => this.selectRegion(6, val)} />
              </div>
            );
          },
          codeVisible: false,
          code: '&lt;StateDropdown\n  value={State}\n  labelType="short"\n  valueType="short"\n  onChange={selectState} />\n&lt;RegionDropdown\n  State={State}\n  value={region}\n  StateValueType="short"\n  labelType="short"\n  valueType="short"\n  onChange={selectRegion} />',
          State: '',
          region: ''
        },

        {
          label: 'Specify which countries should NOT appear. This omits all countries that start with "A".',
          jsx: () => {
            return (
              <div>
                <StateDropdown
                  value={this.getStateValue(7)}
                  onChange={(val) => this.selectState(7, val)}
                  blacklist={['AF','AX','AL','DZ','AS','AD','AO','AI','AQ','AG','AR','AM','AW','AU','AT','AZ']} />
                <RegionDropdown
                  State={this.getStateValue(7)}
                  value={this.getRegionValue(7)}
                  onChange={(val) => this.selectRegion(7, val)} />
              </div>
            );
          },
          codeVisible: false,
          code: "&lt;StateDropdown\n  value={State}\n  onChange={selectState}\n  blacklist={['AF','AX','AL','DZ','AS','AD','AO','AI','AQ','AG']} />\n&lt;RegionDropdown\n  State={State}\n  value={region}\n  onChange={selectRegion} />",
          State: '',
          region: ''
        },

        {
          label: 'Explicitly disabling the State and region dropdowns (with defaults).',
          jsx: () => {
            return (
            <div>
              <StateDropdown
                value={this.getStateValue(8)}
                onChange={(val) => this.selectState(8, val)}
                blacklist={['AF','AX','AL','DZ','AS','AD','AO','AI','AQ','AG','AR','AM','AW','AU','AT','AZ']}
                disabled={true} />
              <RegionDropdown
                State={this.getStateValue(8)}
                value={this.getRegionValue(8)}
                onChange={(val) => this.selectRegion(8, val)}
                disabled={true} />
            </div>
            );
          },
          codeVisible: false,
          code: "&lt;StateDropdown\n  value=\"United States\"\n  onChange={selectState}\n  disabled={true} />\n&lt;RegionDropdown\n  State={State}\n  value=\"Washington\"\n  onChange={selectRegion}\n disabled={true} />",
          State: 'United States',
          region: 'Washington'
        }

      ]
    };
  }

  selectState (exampleIndex, val) {
    const updatedValues = this.state.examples;
    updatedValues[exampleIndex].State = val;
    this.setState({ examples: updatedValues });
  }

  selectRegion (exampleIndex, val) {
    const updatedValues = this.state.examples;
    updatedValues[exampleIndex].region = val;
    this.setState({ examples: updatedValues });
  }

  getStateValue (index) {
    return this.state.examples[index].State;
  }

  getRegionValue (index) {
    return this.state.examples[index].region;
  }

  toggleCode (exampleIndex) {
    const updatedValues = this.state.examples;
    updatedValues[exampleIndex].codeVisible = !updatedValues[exampleIndex].codeVisible;
    this.setState({ examples: updatedValues });
  }

  getExamples () {
    let i = 0;
    return this.state.examples.map((example) => {
      let j = i++;
      return (
        <section key={i}>
          <p>
            <span className="counter">{i}.</span>
            {example.label}
            <span className="toggleCode" title="Toggle code" onClick={() => this.toggleCode(j)}>&lt;/&gt;</span>
          </p>
          {example.jsx()}
          <pre className="hljs html" style={{ display: example.codeVisible ? 'block' : 'none' }}>
            <code className="html" dangerouslySetInnerHTML={{__html: example.code }} />
          </pre>
        </section>
      );
    });
  }

  render () {
    return (
      <div>
        {this.getExamples()}
      </div>
    );
  }
}


ReactDOM.render(<ExamplesPage />, document.getElementById('examples'));
