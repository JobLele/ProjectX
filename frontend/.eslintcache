[{"/home/desmond/Documents/Web-D projects/ProjectX-master/frontend/src/App.js":"1","/home/desmond/Documents/Web-D projects/ProjectX-master/frontend/src/Components/Jobs/PostJob/PostJob.js":"2","/home/desmond/Documents/Web-D projects/ProjectX-master/frontend/src/Components/Profile/PP/PP.js":"3","/home/desmond/Documents/Web-D projects/ProjectX-master/frontend/src/Components/Register/Register.js":"4","/home/desmond/Documents/Web-D projects/ProjectX-master/frontend/src/index.js":"5","/home/desmond/Documents/Web-D projects/ProjectX-master/frontend/src/Components/Jobs/EditJob/EditJob.js":"6","/home/desmond/Documents/Web-D projects/ProjectX-master/frontend/src/Components/Login/Login.js":"7","/home/desmond/Documents/Web-D projects/ProjectX-master/frontend/src/Components/Jobs/Job/Job.js":"8","/home/desmond/Documents/Web-D projects/ProjectX-master/frontend/src/Components/Profile/EditProfile/EditProfile.js":"9","/home/desmond/Documents/Web-D projects/ProjectX-master/frontend/src/Components/Navbar/Navbar.js":"10","/home/desmond/Documents/Web-D projects/ProjectX-master/frontend/src/Components/Logout/Logout.js":"11","/home/desmond/Documents/Web-D projects/ProjectX-master/frontend/src/Components/Jobs/ApplyJob/ApplyJob.js":"12","/home/desmond/Documents/Web-D projects/ProjectX-master/frontend/src/Components/Jobs/JobList/Joblist.js":"13","/home/desmond/Documents/Web-D projects/ProjectX-master/frontend/src/Components/Footer/Footer.js":"14"},{"size":1725,"mtime":1606720253000,"results":"15","hashOfConfig":"16"},{"size":11552,"mtime":1605719814000,"results":"17","hashOfConfig":"16"},{"size":8267,"mtime":1605719814000,"results":"18","hashOfConfig":"16"},{"size":6367,"mtime":1605719814000,"results":"19","hashOfConfig":"16"},{"size":549,"mtime":1605719814000,"results":"20","hashOfConfig":"16"},{"size":11998,"mtime":1606720253000,"results":"21","hashOfConfig":"16"},{"size":4707,"mtime":1605719814000,"results":"22","hashOfConfig":"16"},{"size":4336,"mtime":1606720253000,"results":"23","hashOfConfig":"16"},{"size":7360,"mtime":1605719814000,"results":"24","hashOfConfig":"16"},{"size":3864,"mtime":1605719814000,"results":"25","hashOfConfig":"16"},{"size":1159,"mtime":1606720253000,"results":"26","hashOfConfig":"16"},{"size":6468,"mtime":1606720253000,"results":"27","hashOfConfig":"16"},{"size":11230,"mtime":1606720253000,"results":"28","hashOfConfig":"16"},{"size":1417,"mtime":1606720253000,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"gfis7x",{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/desmond/Documents/Web-D projects/ProjectX-master/frontend/src/App.js",[],"/home/desmond/Documents/Web-D projects/ProjectX-master/frontend/src/Components/Jobs/PostJob/PostJob.js",["61","62"],"import React from 'react'\nimport Button from 'react-bootstrap/Button';\nimport Card from 'react-bootstrap/Card';\nimport DatePicker from \"react-datepicker\";\nimport Cookies from 'universal-cookie';\nimport Jumbotron from 'react-bootstrap/Jumbotron';\nimport Container from 'react-bootstrap/Container';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { StateDropdown, RegionDropdown } from 'react-india-state-region-selector';\nimport \"./postjob.css\";\nimport { GoogleComponent } from 'react-google-location'\nconst API_KEY = \"AIzaSyBG0T-DKPFzsOMPmPVa0zzOZ1bYof9858A\";\n\n\nclass PostJob extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            values: {\n                salary: 0,\n                title: \"\",\n                description: \"\",\n                from: new Date(),\n                to: new Date(),\n                state: '',\n                region: '',\n                by: \"\",\n                place: null\n            },\n            err: null,\n            msg: null,\n            obj: null,\n            fields: {},\n            errors: {}\n        };\n        this.handleValidation = this.handleValidation.bind(this);\n        //this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleInputChangeDateFrom = this.handleInputChangeDateFrom.bind(this);\n        this.handleInputChangeDateTo = this.handleInputChangeDateTo.bind(this);\n        this.submit = this.submit.bind(this);\n    }\n\n    componentDidMount() {\n        const cookies = new Cookies();\n        var uid = cookies.get('uid');\n        if (!cookies.get('uid')) {\n            alert(\"You can't post, please register to avail this feature\");\n            window.location.href = \"/\";\n        }\n        this.setState({\n            values: {\n                ...this.state.values,\n                by: uid\n            }\n        });\n    }\n\n    handleInputChange = (field, e) => {\n        let fields = this.state.fields;\n        fields[field] = e.target.value;\n        this.setState({ fields });\n        this.setState({\n            fields,\n            values: {\n                ...this.state.values,\n                [e.target.name]: e.target.value\n            }\n        });\n    }\n\n    handleInputChangeDateFrom = (e) => {\n        this.setState({\n            values: {\n                ...this.state.values,\n                from: e\n            }\n        })\n    }\n\n    handleInputChangeDateTo = (e) => {\n        if (this.state.values.from > e) {\n            console.log(\"end date cant be lesser than start date\");\n        }\n        else {\n            this.setState({\n                values: {\n                    ...this.state.values,\n                    to: e\n                }\n            })\n        }\n\n    }\n\n    selectState(val) {\n        let fields = this.state.fields;\n        fields[\"state\"] = val;\n        this.setState({ fields });\n        this.setState({\n            fields,\n            values: {\n                ...this.state.values,\n                state: val,\n            }\n        });\n    }\n\n    selectRegion(val) {\n        let fields = this.state.fields;\n        fields[\"region\"] = val;\n        this.setState({ fields });\n        this.setState({\n            fields,\n            values: {\n                ...this.state.values,\n                region: val,\n            }\n        });\n    }\n\n    handleValidation() {\n        let fields = this.state.fields;\n        let errors = {};\n        let formIsValid = true;\n\n        //Name\n        if (!fields[\"title\"]) {\n            formIsValid = false;\n            errors[\"title\"] = \"Cannot be empty\";\n        } if (!fields[\"salary\"]) {\n            formIsValid = false;\n            errors[\"salary\"] = \"Cannot be empty\";\n        }\n        if (!fields[\"description\"]) {\n            formIsValid = false;\n            errors[\"description\"] = \"Cannot be empty\";\n        } if (!fields[\"state\"]) {\n            formIsValid = false;\n            errors[\"state\"] = \"Cannot be empty\";\n        }\n        if (!fields[\"region\"]) {\n            formIsValid = false;\n            errors[\"region\"] = \"Cannot be empty\";\n        }\n        this.setState({ errors: errors });\n        console.log(this.state.errors);\n        return formIsValid;\n    }\n    submit(e) {\n        // e.preventdefault();\n        if (this.handleValidation()) {\n            alert(\"Form submitted\");\n            console.log(this.state.values);\n            fetch(\"http://localhost:2000/job\", {\n                method: 'POST',\n                body: JSON.stringify(this.state.values),\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                }\n            })\n                .then(res => {\n                    this.setState({ err: false, msg: res.msg });\n                    return res.json();\n                })\n                .then(data => {\n                    if (data.err) {\n                        this.setState({ err: true, msg: data.err });\n                        console.log(this.msg);\n                    }\n                    else {\n                        window.location.href = \"/\"\n                    }\n                    this.setState({ obj: data.obj });\n                    console.log(this.state.obj);\n                })\n        } else {\n            alert(\"Form has errors.\")\n        }\n    }\n\n    render() {\n        if (this.state.err !== true) {\n            return (\n                <div>\n                    <center>\n                        <form>\n                            <Card className=\"text-center post-job-form\" >\n                                <Card.Header>\n                                    <h3>Job Post</h3>\n                                </Card.Header>\n                                <Card.Body>\n\n                                    <div className=\"form-group\">\n                                        <label className=\"font-increase-label\">Job Title*</label>\n                                        <input type=\"text\" name=\"title\" className=\"form-control\" placeholder=\"Job Title\" onChange={this.handleInputChange.bind(this, \"title\")} required={true} />\n                                        <span style={{ color: \"red\" }}>{this.state.errors[\"title\"]}</span>\n                                        <br />\n                                    </div>\n                                    <div className=\"form-group\">\n                                        <label className=\"font-increase-label\">Salary*</label>\n                                        <input type=\"number\" id=\"salary\" name=\"salary\" className=\"form-control\" onChange={this.handleInputChange.bind(this, \"salary\")}></input>\n                                        <div style={{ color: \"red\" }}>{this.state.errors[\"salary\"]}</div>\n                                        <div className=\"desc-feat\">Mention salary as per day.</div>\n                                        \n                                    </div>\n\n                                    {/* <div className=\"form-group\">\n                                    <label className=\"font-increase-label\">Location</label>\n                                    <br />\n                                    <GoogleComponent apiKey={API_KEY} language={'en'} country={'country:in|country:us'} coordinates={true} className=\"form-control\" />\n                                </div> */}\n                                    < div className=\"date-box-postjob form-group\">\n                                        <div className=\"p-2 col-example text-left\">\n                                            <label className=\"font-increase-label\">State*</label>\n                                            <br />\n                                            <StateDropdown id=\"state\" name=\"state\" className=\"form-control\" value={this.state.values.state} onChange={(val) => this.selectState(val)} />\n                                            <br />\n                                            <span style={{ color: \"red\" }}>{this.state.errors[\"state\"]}</span>\n                                            <br />\n                                        </div>\n\n                                        <div className=\"p-2 col-example text-left\">\n                                            <label className=\"font-increase-label\">Region*</label>\n                                            <br />\n\n                                            <RegionDropdown id=\"region\" name=\"region\" className=\"form-control\" State={this.state.values.state} value={this.state.values.region} onChange={(val) => this.selectRegion(val)} />\n\n                                            <br />\n                                            <span style={{ color: \"red\" }}>{this.state.errors[\"region\"]}</span>\n                                            <br />\n                                        </div>\n                                    </div>\n\n                                    <div className=\"date-box-postjob form-group\">\n                                        <div className=\"p-2 col-example text-left\">\n                                            <label>Start Date*</label><br />\n                                            <DatePicker\n                                                selected={this.state.values.from}\n                                                onChange={this.handleInputChangeDateFrom}\n                                                name=\"from\"\n                                                dateFormat=\"MM/dd/yyyy\"\n                                                className=\"form-control\" />\n\n                                        </div>\n                                        <div className=\"p-2 col-example text-left\">\n                                            <label>End Date*</label><br />\n                                            <DatePicker\n                                                selected={this.state.values.to}\n                                                onChange={this.handleInputChangeDateTo}\n                                                name=\"to\"\n                                                dateFormat=\"MM/dd/yyyy\"\n                                                className=\"form-control\"\n                                            />\n                                        </div>\n                                    </div>\n                                    <div className=\"form-group\" >\n                                        <label className=\"font-increase-label\">Description*</label>\n                                        <textarea onChange={this.handleInputChange.bind(this, \"description\")} name=\"description\" className=\"form-control\" rows={5} placeholder=\"Description\" />\n                                        <div style={{ color: \"red\" }}>{this.state.errors[\"description\"]}</div>\n                                        \n                                        <div className=\"desc-feat\">Include conditions,features and whatever necessary for this job.</div>\n                                    </div>\n                                    <Button onClick={this.submit} variant=\"dark\" className=\"btn btn-block\">Post Job</Button>\n                                </Card.Body>\n                            </Card>\n                        </form>\n                    </center>\n                </div>\n            )\n        } else {\n            return (\n                <Jumbotron fluid>\n                    <Container>\n                        <h1><center>{this.state.msg}</center></h1>\n                    </Container>\n                </Jumbotron>\n            )\n        }\n    }\n}\n\nexport default PostJob\n",["63","64"],"/home/desmond/Documents/Web-D projects/ProjectX-master/frontend/src/Components/Profile/PP/PP.js",[],["65","66"],"/home/desmond/Documents/Web-D projects/ProjectX-master/frontend/src/Components/Register/Register.js",[],"/home/desmond/Documents/Web-D projects/ProjectX-master/frontend/src/index.js",[],"/home/desmond/Documents/Web-D projects/ProjectX-master/frontend/src/Components/Jobs/EditJob/EditJob.js",["67","68"],"/home/desmond/Documents/Web-D projects/ProjectX-master/frontend/src/Components/Login/Login.js",[],"/home/desmond/Documents/Web-D projects/ProjectX-master/frontend/src/Components/Jobs/Job/Job.js",["69"],"/home/desmond/Documents/Web-D projects/ProjectX-master/frontend/src/Components/Profile/EditProfile/EditProfile.js",[],"/home/desmond/Documents/Web-D projects/ProjectX-master/frontend/src/Components/Navbar/Navbar.js",[],"/home/desmond/Documents/Web-D projects/ProjectX-master/frontend/src/Components/Logout/Logout.js",[],"/home/desmond/Documents/Web-D projects/ProjectX-master/frontend/src/Components/Jobs/ApplyJob/ApplyJob.js",["70","71"],"/home/desmond/Documents/Web-D projects/ProjectX-master/frontend/src/Components/Jobs/JobList/Joblist.js",[],"/home/desmond/Documents/Web-D projects/ProjectX-master/frontend/src/Components/Footer/Footer.js",[],{"ruleId":"72","severity":1,"message":"73","line":11,"column":10,"nodeType":"74","messageId":"75","endLine":11,"endColumn":25},{"ruleId":"72","severity":1,"message":"76","line":12,"column":7,"nodeType":"74","messageId":"75","endLine":12,"endColumn":14},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"77","replacedBy":"81"},{"ruleId":"79","replacedBy":"82"},{"ruleId":"72","severity":1,"message":"73","line":9,"column":10,"nodeType":"74","messageId":"75","endLine":9,"endColumn":25},{"ruleId":"72","severity":1,"message":"76","line":10,"column":7,"nodeType":"74","messageId":"75","endLine":10,"endColumn":14},{"ruleId":"83","severity":1,"message":"84","line":32,"column":32,"nodeType":"85","messageId":"86","endLine":32,"endColumn":34},{"ruleId":"83","severity":1,"message":"84","line":62,"column":34,"nodeType":"85","messageId":"86","endLine":62,"endColumn":36},{"ruleId":"83","severity":1,"message":"87","line":62,"column":77,"nodeType":"85","messageId":"86","endLine":62,"endColumn":79},"no-unused-vars","'GoogleComponent' is defined but never used.","Identifier","unusedVar","'API_KEY' is assigned a value but never used.","no-native-reassign",["88"],"no-negated-in-lhs",["89"],["88"],["89"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","Expected '!==' and instead saw '!='.","no-global-assign","no-unsafe-negation"]